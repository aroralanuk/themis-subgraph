// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class AuctionEnded extends ethereum.Event {
  get params(): AuctionEnded__Params {
    return new AuctionEnded__Params(this);
  }
}

export class AuctionEnded__Params {
  _event: AuctionEnded;

  constructor(event: AuctionEnded) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class AuctionInitialized extends ethereum.Event {
  get params(): AuctionInitialized__Params {
    return new AuctionInitialized__Params(this);
  }
}

export class AuctionInitialized__Params {
  _event: AuctionInitialized;

  constructor(event: AuctionInitialized) {
    this._event = event;
  }

  get auction(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get auctionStart(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get BidDeadline(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get RevealDeadline(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get reservePrice(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class BidFailed extends ethereum.Event {
  get params(): BidFailed__Params {
    return new BidFailed__Params(this);
  }
}

export class BidFailed__Params {
  _event: BidFailed;

  constructor(event: BidFailed) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get auction(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get bidder(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get bidAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class BidProvenRemote extends ethereum.Event {
  get params(): BidProvenRemote__Params {
    return new BidProvenRemote__Params(this);
  }
}

export class BidProvenRemote__Params {
  _event: BidProvenRemote;

  constructor(event: BidProvenRemote) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get auction(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get bidder_(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get vaultAmount_(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class BidRevealed extends ethereum.Event {
  get params(): BidRevealed__Params {
    return new BidRevealed__Params(this);
  }
}

export class BidRevealed__Params {
  _event: BidRevealed;

  constructor(event: BidRevealed) {
    this._event = event;
  }

  get currentPosition(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get domain(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bidderAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class BidShortlisted extends ethereum.Event {
  get params(): BidShortlisted__Params {
    return new BidShortlisted__Params(this);
  }
}

export class BidShortlisted__Params {
  _event: BidShortlisted;

  constructor(event: BidShortlisted) {
    this._event = event;
  }

  get mintIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get domain(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bidder(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get bidAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class BidSuccessfullyPlaced extends ethereum.Event {
  get params(): BidSuccessfullyPlaced__Params {
    return new BidSuccessfullyPlaced__Params(this);
  }
}

export class BidSuccessfullyPlaced__Params {
  _event: BidSuccessfullyPlaced;

  constructor(event: BidSuccessfullyPlaced) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get auction(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get bidder(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get bidAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ReceivedToken extends ethereum.Event {
  get params(): ReceivedToken__Params {
    return new ReceivedToken__Params(this);
  }
}

export class ReceivedToken__Params {
  _event: ReceivedToken;

  constructor(event: ReceivedToken) {
    this._event = event;
  }

  get origin(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sender(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get data(): string {
    return this._event.parameters[2].value.toString();
  }

  get token(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Reserved extends ethereum.Event {
  get params(): Reserved__Params {
    return new Reserved__Params(this);
  }
}

export class Reserved__Params {
  _event: Reserved;

  constructor(event: Reserved) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RevealEnded extends ethereum.Event {
  get params(): RevealEnded__Params {
    return new RevealEnded__Params(this);
  }
}

export class RevealEnded__Params {
  _event: RevealEnded;

  constructor(event: RevealEnded) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RevealStarted extends ethereum.Event {
  get params(): RevealStarted__Params {
    return new RevealStarted__Params(this);
  }
}

export class RevealStarted__Params {
  _event: RevealStarted;

  constructor(event: RevealStarted) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RevealStartedController extends ethereum.Event {
  get params(): RevealStartedController__Params {
    return new RevealStartedController__Params(this);
  }
}

export class RevealStartedController__Params {
  _event: RevealStartedController;

  constructor(event: RevealStartedController) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class VaultDeployed extends ethereum.Event {
  get params(): VaultDeployed__Params {
    return new VaultDeployed__Params(this);
  }
}

export class VaultDeployed__Params {
  _event: VaultDeployed;

  constructor(event: VaultDeployed) {
    this._event = event;
  }

  get auction(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get bidder(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get vault(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ThemisAuction__getHighestBidsResultValue0Struct extends ethereum.Tuple {
  get domain(): BigInt {
    return this[0].toBigInt();
  }

  get bidderAddress(): Address {
    return this[1].toAddress();
  }

  get bidAmount(): BigInt {
    return this[2].toBigInt();
  }

  get bidTimestamp(): BigInt {
    return this[3].toBigInt();
  }
}

export class ThemisAuction extends ethereum.SmartContract {
  static bind(address: Address): ThemisAuction {
    return new ThemisAuction("ThemisAuction", address);
  }

  BASE_ASSET_URI(): string {
    let result = super.call("BASE_ASSET_URI", "BASE_ASSET_URI():(string)", []);

    return result[0].toString();
  }

  try_BASE_ASSET_URI(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "BASE_ASSET_URI",
      "BASE_ASSET_URI():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  MAX_SUPPLY(): BigInt {
    let result = super.call("MAX_SUPPLY", "MAX_SUPPLY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_SUPPLY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_SUPPLY", "MAX_SUPPLY():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ROUTER_ADDRESS(): Address {
    let result = super.call("ROUTER_ADDRESS", "ROUTER_ADDRESS():(address)", []);

    return result[0].toAddress();
  }

  try_ROUTER_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ROUTER_ADDRESS",
      "ROUTER_ADDRESS():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkBid(bidder: Bytes, bidAmount: BigInt, salt: Bytes): boolean {
    let result = super.call(
      "checkBid",
      "checkBid(bytes32,uint128,bytes32):(bool)",
      [
        ethereum.Value.fromFixedBytes(bidder),
        ethereum.Value.fromUnsignedBigInt(bidAmount),
        ethereum.Value.fromFixedBytes(salt)
      ]
    );

    return result[0].toBoolean();
  }

  try_checkBid(
    bidder: Bytes,
    bidAmount: BigInt,
    salt: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkBid",
      "checkBid(bytes32,uint128,bytes32):(bool)",
      [
        ethereum.Value.fromFixedBytes(bidder),
        ethereum.Value.fromUnsignedBigInt(bidAmount),
        ethereum.Value.fromFixedBytes(salt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkLiquidityReceipt(_receipt: BigInt): boolean {
    let result = super.call(
      "checkLiquidityReceipt",
      "checkLiquidityReceipt(uint32):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_receipt)]
    );

    return result[0].toBoolean();
  }

  try_checkLiquidityReceipt(_receipt: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkLiquidityReceipt",
      "checkLiquidityReceipt(uint32):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_receipt)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  collectionOwner(): Address {
    let result = super.call(
      "collectionOwner",
      "collectionOwner():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_collectionOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "collectionOwner",
      "collectionOwner():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  controllers(param0: BigInt): Address {
    let result = super.call("controllers", "controllers(uint32):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_controllers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("controllers", "controllers(uint32):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  endOfBiddingPeriod(): BigInt {
    let result = super.call(
      "endOfBiddingPeriod",
      "endOfBiddingPeriod():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_endOfBiddingPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "endOfBiddingPeriod",
      "endOfBiddingPeriod():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  endOfRevealPeriod(): BigInt {
    let result = super.call(
      "endOfRevealPeriod",
      "endOfRevealPeriod():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_endOfRevealPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "endOfRevealPeriod",
      "endOfRevealPeriod():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(param0: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getController(_domain: BigInt): Address {
    let result = super.call(
      "getController",
      "getController(uint32):(address)",
      [ethereum.Value.fromUnsignedBigInt(_domain)]
    );

    return result[0].toAddress();
  }

  try_getController(_domain: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getController",
      "getController(uint32):(address)",
      [ethereum.Value.fromUnsignedBigInt(_domain)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getHighestBids(): Array<ThemisAuction__getHighestBidsResultValue0Struct> {
    let result = super.call(
      "getHighestBids",
      "getHighestBids():((uint32,address,uint128,uint64)[])",
      []
    );

    return result[0].toTupleArray<
      ThemisAuction__getHighestBidsResultValue0Struct
    >();
  }

  try_getHighestBids(): ethereum.CallResult<
    Array<ThemisAuction__getHighestBidsResultValue0Struct>
  > {
    let result = super.tryCall(
      "getHighestBids",
      "getHighestBids():((uint32,address,uint128,uint64)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<ThemisAuction__getHighestBidsResultValue0Struct>()
    );
  }

  highestBids(): BigInt {
    let result = super.call("highestBids", "highestBids():(uint32)", []);

    return result[0].toBigInt();
  }

  try_highestBids(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("highestBids", "highestBids():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(param0: Address, param1: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(id: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(id: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reservePrice(): BigInt {
    let result = super.call("reservePrice", "reservePrice():(uint128)", []);

    return result[0].toBigInt();
  }

  try_reservePrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("reservePrice", "reservePrice():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reserved(param0: BigInt): Address {
    let result = super.call("reserved", "reserved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_reserved(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("reserved", "reserved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  router(): Address {
    let result = super.call("router", "router():(address)", []);

    return result[0].toAddress();
  }

  try_router(): ethereum.CallResult<Address> {
    let result = super.tryCall("router", "router():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  testRouter(): BigInt {
    let result = super.call("testRouter", "testRouter():(uint128)", []);

    return result[0].toBigInt();
  }

  try_testRouter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("testRouter", "testRouter():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(id: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toString();
  }

  try_tokenURI(id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get name_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get maxSupply_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class CheckBidCall extends ethereum.Call {
  get inputs(): CheckBidCall__Inputs {
    return new CheckBidCall__Inputs(this);
  }

  get outputs(): CheckBidCall__Outputs {
    return new CheckBidCall__Outputs(this);
  }
}

export class CheckBidCall__Inputs {
  _call: CheckBidCall;

  constructor(call: CheckBidCall) {
    this._call = call;
  }

  get bidder(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get bidAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get salt(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class CheckBidCall__Outputs {
  _call: CheckBidCall;

  constructor(call: CheckBidCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class EndAuctionCall extends ethereum.Call {
  get inputs(): EndAuctionCall__Inputs {
    return new EndAuctionCall__Inputs(this);
  }

  get outputs(): EndAuctionCall__Outputs {
    return new EndAuctionCall__Outputs(this);
  }
}

export class EndAuctionCall__Inputs {
  _call: EndAuctionCall;

  constructor(call: EndAuctionCall) {
    this._call = call;
  }
}

export class EndAuctionCall__Outputs {
  _call: EndAuctionCall;

  constructor(call: EndAuctionCall) {
    this._call = call;
  }
}

export class EndBidPeriodCall extends ethereum.Call {
  get inputs(): EndBidPeriodCall__Inputs {
    return new EndBidPeriodCall__Inputs(this);
  }

  get outputs(): EndBidPeriodCall__Outputs {
    return new EndBidPeriodCall__Outputs(this);
  }
}

export class EndBidPeriodCall__Inputs {
  _call: EndBidPeriodCall;

  constructor(call: EndBidPeriodCall) {
    this._call = call;
  }
}

export class EndBidPeriodCall__Outputs {
  _call: EndBidPeriodCall;

  constructor(call: EndBidPeriodCall) {
    this._call = call;
  }
}

export class EndRevealPeriodCall extends ethereum.Call {
  get inputs(): EndRevealPeriodCall__Inputs {
    return new EndRevealPeriodCall__Inputs(this);
  }

  get outputs(): EndRevealPeriodCall__Outputs {
    return new EndRevealPeriodCall__Outputs(this);
  }
}

export class EndRevealPeriodCall__Inputs {
  _call: EndRevealPeriodCall;

  constructor(call: EndRevealPeriodCall) {
    this._call = call;
  }
}

export class EndRevealPeriodCall__Outputs {
  _call: EndRevealPeriodCall;

  constructor(call: EndRevealPeriodCall) {
    this._call = call;
  }
}

export class HandleWithTokensCall extends ethereum.Call {
  get inputs(): HandleWithTokensCall__Inputs {
    return new HandleWithTokensCall__Inputs(this);
  }

  get outputs(): HandleWithTokensCall__Outputs {
    return new HandleWithTokensCall__Outputs(this);
  }
}

export class HandleWithTokensCall__Inputs {
  _call: HandleWithTokensCall;

  constructor(call: HandleWithTokensCall) {
    this._call = call;
  }

  get _origin(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _sender(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get _token(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class HandleWithTokensCall__Outputs {
  _call: HandleWithTokensCall;

  constructor(call: HandleWithTokensCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get bidPeriod_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get revealPeriod_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get reservePrice_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LateRevealBidCall extends ethereum.Call {
  get inputs(): LateRevealBidCall__Inputs {
    return new LateRevealBidCall__Inputs(this);
  }

  get outputs(): LateRevealBidCall__Outputs {
    return new LateRevealBidCall__Outputs(this);
  }
}

export class LateRevealBidCall__Inputs {
  _call: LateRevealBidCall;

  constructor(call: LateRevealBidCall) {
    this._call = call;
  }
}

export class LateRevealBidCall__Outputs {
  _call: LateRevealBidCall;

  constructor(call: LateRevealBidCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetRouterCall extends ethereum.Call {
  get inputs(): SetRouterCall__Inputs {
    return new SetRouterCall__Inputs(this);
  }

  get outputs(): SetRouterCall__Outputs {
    return new SetRouterCall__Outputs(this);
  }
}

export class SetRouterCall__Inputs {
  _call: SetRouterCall;

  constructor(call: SetRouterCall) {
    this._call = call;
  }

  get router_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRouterCall__Outputs {
  _call: SetRouterCall;

  constructor(call: SetRouterCall) {
    this._call = call;
  }
}

export class TestRouterCall extends ethereum.Call {
  get inputs(): TestRouterCall__Inputs {
    return new TestRouterCall__Inputs(this);
  }

  get outputs(): TestRouterCall__Outputs {
    return new TestRouterCall__Outputs(this);
  }
}

export class TestRouterCall__Inputs {
  _call: TestRouterCall;

  constructor(call: TestRouterCall) {
    this._call = call;
  }
}

export class TestRouterCall__Outputs {
  _call: TestRouterCall;

  constructor(call: TestRouterCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}
